#!/bin/bash

# This script requires the 'youtube-dl', 'ffmpeg', 'jq' packages.
# Make sure you already installed all of them.
# You could run any of install scripts included to the repository.

# Path where config is being stored
readonly CONFIG_PATH=~/.config/yt-dl.json

# Config (default) variables
config_saving_dir=~/download
config_saving_file_name="%(title)s.%(ext)s"
config_saving_audio_format="mp3"
config_saving_audio_quality=0 # 0 - Best | 10 - Worst
config_searching_results_count=5

# Data variables
readonly VERSION="v1.0"
readonly VERSION_DATE="11.02.2021"
songs=()

function dl_url
{
	youtube-dl -o "${config_saving_dir}/${config_saving_file_name}" -x --audio-format $config_saving_audio_format --audio-quality $config_saving_audio_quality $1
}

function is_url_valid
{
    regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'

    [[ $1 =~ $regex ]]
}

function search_songs
{
	songs=()
	local search_results=$(mktemp)

	youtube-dl -j --default-search "ytsearch${config_searching_results_count}" "$1" | jq '{title:.fulltitle, url: .webpage_url}' > $search_results

	local line_number=0
	local temp_string=""
	while IFS= read -r line
	do
		line_number=$((line_number+1))
		temp_string="${temp_string}${line}"

		if [ $(( $line_number % 4 )) -eq 0 ]; then
			songs[${#songs[@]}]=$(jq '.' <(echo "$temp_string"))
			temp_string=""
		fi
	done < "$search_results"

	rm $search_results
}

function show_found_songs
{
	local number=0
	local title=""
	for i in "${!songs[@]}"; do
		number=$((i+1))
		title=$(jq '.title' <(echo "${songs[$i]}"))
		echo "$number) $title"
	done
	echo "0) Back to Main menu"
}

function detect_distro
{
	echo $(lsb_release -is)
}

function update_youtubedl
{
	distro=$(detect_distro)
	
	case $distro in
		"Debian" | "Ubuntu" | "Kali" | "Mint")
			sudo youtube-dl -U
			;;
		"Arch" | "ManjaroLinux")
			sudo pacman -S youtube-dl
			;;
		*)
			echo -e "The script could not to detect your distro (${distro})!\nPlease update youtube-dl manually."
			;;
	esac
}

function create_config
{
	echo -e $(jq -n --arg saving_dir $config_saving_dir \
		--arg saving_file_name $config_saving_file_name \
		--arg saving_audio_format $config_saving_audio_format \
		--arg saving_audio_quality $config_saving_audio_quality \
		--arg searching_results_count $config_searching_results_count \
		'{$saving_dir, $saving_file_name, $saving_audio_format, $saving_audio_quality, $searching_results_count}') | jq . > "$1"
}

function load_config
{
	if [ ! -f $CONFIG_PATH ]; then
		local config_dir=${CONFIG_PATH%/*}
		mkdir -p $config_dir

		touch $CONFIG_PATH
		create_config $CONFIG_PATH
	fi

	config_saving_dir=$(jq '.saving_dir' $CONFIG_PATH | tr -d '"')
	config_saving_file_name=$(jq '.saving_file_name' $CONFIG_PATH | tr -d '"')
	config_saving_audio_format=$(jq '.saving_audio_format' $CONFIG_PATH | tr -d '"')
	config_saving_audio_quality=$(jq '.saving_audio_quality' $CONFIG_PATH | tr -d '"')
	config_searching_results_count=$(jq '.searching_results_count' $CONFIG_PATH | tr -d '"')

	if [ ! -d $config_saving_dir ]; then
		mkdir -p $config_saving_dir
	fi
}

function show_downloaded_songs
{
	if [[ -d $config_saving_dir && "$(ls -A $config_saving_dir)" ]]; then
		local songs_count=$(ls -l $config_saving_dir/*.$config_saving_audio_format | wc -l)
	else
		local songs_count=0
	fi

	echo -e "Download directory '${config_saving_dir}' [${songs_count} song(s) total]:\n"

	if [[ -d $config_saving_dir && "$(ls -A $config_saving_dir)" ]]; then
		local songs=$(ls -A $config_saving_dir/*.$config_saving_audio_format)
		local songs_array=()
		readarray -t songs_array <<< "$songs"

		for song in "${songs_array[@]}"
		do
			echo $(basename "${song}")
		done
	fi
}

function press_any_key
{
	echo ""
	read -n 1 -s -r -p "Press any key to continue..."
}

function show_menu
{
	clear
	echo -e "|      YT-DL (cli)      |\n"

	PS3='> '
	menu=("Download the song (URL)" "Search the song (Title)" "Update the youtube-dl" "Show the downloaded songs" "About" "Quit")
	
	COLUMNS=12
	select option in "${menu[@]}"
	do
		case $REPLY in
			1)
				menu_url
				;;
			2)
				menu_search
				;;
			3)
				menu_update
				;;
			4)
				menu_downloaded
				;;
			5)
				menu_about
				;;
			6)
				menu_quit
				;;
			*)
				echo "Please choose valid option (1-6)."
				;;
		esac
	done
}

function menu_url
{
	clear
	echo -e "[Download the song (URL)]\n"

	echo "Please enter the song URL."

	local song_url=""
	while ! is_url_valid $song_url
	do
		read -p "> " song_url
	done 
	echo ""
	
	dl_url $song_url

	press_any_key
	show_menu
}

function menu_search
{
	clear
	echo -e "[Search the song (Title)]\n"

	echo "Please enter the song's title."

	local title=""
	while [[ $title == "" ]]
	do
		read -p "> " title
	done 
	echo ""

	search_songs $title
	echo "Please choose the song's number:"
	show_found_songs

	read -p "> " song_number
	echo ""

	if [ $song_number -eq 0 ]; then
		show_menu
		return 0
	fi

	local song_index=$((song_number-1))
	local song_url=$(jq '.url' <(echo "${songs[song_index]}") | tr -d '"')

	dl_url $song_url

	press_any_key
	show_menu
}

function menu_update
{
	clear
	echo -e "[Update the youtube-dl]\n"

	echo "Updating the youtube-dl."
	echo ""

	update_youtubedl

	press_any_key
	show_menu
}

function menu_downloaded
{
	clear
	echo -e "[Show the downloaded songs]\n"

	show_downloaded_songs

	press_any_key
	show_menu
}

function menu_about
{
	clear
	echo -e "[About]\n"

	echo -e "" \
		"NAME:\t\tYT-DL (cli)\n" \
		"VERSION:\t${VERSION} (${VERSION_DATE})\n" \
		"\n" \
		"A shell script that allows you to download songs from YouTube.\n" \
		"Search songs by title, Paste links to videos and Adjust configuration to reach your purpose.\n" \
		"The configuration file is located in '${CONFIG_PATH}'. Enjoy!"

	press_any_key
	show_menu
}

function menu_quit
{
	clear
	exit
}

load_config
show_menu
